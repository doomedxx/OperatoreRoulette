package operatoreroulette;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.Serializable;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.swing.JFrame;
import javax.swing.Timer;
/**
 *
 * @author wesle
 */
public class UI extends java.awt.Frame implements Serializable {
    private static final long serialVersionUID = 1L;
    /**
     * Creates new form UI
     */
    public UI() {
        initComponents();
        list = new operatorList();
        noSoundEffects = false;
        boolean noBackground = true;
        totalRolls = 0;
        backgroundNumber = 1;
        blitzEnabled = true;
        montagneEnabled = true;
        instantRoll = true;
        recruitsEnabled = true;
        uniqueOperatorMode = false;
        rollSpeed = 0;
        operatorAmount.setVisible(false);
        labelOperatorsLeft.setVisible(false);
        JFrame.setDefaultLookAndFeelDecorated(true);
        System.setProperty("sun.awt.noerasebackground", "true");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jSeparator2 = new javax.swing.JSeparator();
        appSettings = new javax.swing.JLabel();
        disableOpsLabel1 = new javax.swing.JLabel();
        blitzToggle = new javax.swing.JToggleButton();
        montagneToggle = new javax.swing.JToggleButton();
        shrinkMenu = new javax.swing.JButton();
        backgroundRemovalOption = new javax.swing.JButton();
        recruitsToggle = new javax.swing.JToggleButton();
        instantRollMode = new javax.swing.JToggleButton();
        uniqueOperatorMOde = new javax.swing.JToggleButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        DisableSound = new javax.swing.JToggleButton();
        optionsButton = new javax.swing.JButton();
        appTitle = new javax.swing.JLabel();
        titleShadow = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        attackerButton = new javax.swing.JButton();
        operatorAmount = new javax.swing.JLabel();
        labelOperatorsLeft = new javax.swing.JLabel();
        panelDice = new javax.swing.JPanel();
        attackerLabel = new javax.swing.JLabel();
        shieldLogo = new javax.swing.JLabel();
        shieldLogo1 = new javax.swing.JLabel();
        defenderLogo = new javax.swing.JLabel();
        defenderLabel = new javax.swing.JLabel();
        attackerLogo = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        rollProgress = new javax.swing.JProgressBar();
        jSeparator1 = new javax.swing.JSeparator();
        challengeLabel = new javax.swing.JLabel();
        challengeStaticLabel1 = new javax.swing.JLabel();
        Changelog = new javax.swing.JButton();
        backgroundImage = new javax.swing.JLabel();

        setBackground(java.awt.Color.black);
        setPreferredSize(new java.awt.Dimension(507, 561));
        setResizable(false);
        setTitle("Rainbow Six: Siege - Operator Roulette");
        setType(java.awt.Window.Type.POPUP);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        setLayout(null);

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Bebas Neue Regular", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("v0.5 Alpha");
        add(jLabel2);
        jLabel2.setBounds(20, 536, 80, 20);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setOpaque(false);
        jPanel2.setLayout(null);

        jSeparator2.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator2.setFont(new java.awt.Font("Dialog", 0, 48)); // NOI18N
        jSeparator2.setPreferredSize(new java.awt.Dimension(500, 10));
        jPanel2.add(jSeparator2);
        jSeparator2.setBounds(0, 0, 30, 570);

        appSettings.setFont(new java.awt.Font("Bebas Neue Regular", 0, 36)); // NOI18N
        appSettings.setForeground(new java.awt.Color(255, 255, 255));
        appSettings.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        appSettings.setText("App Settings");
        jPanel2.add(appSettings);
        appSettings.setBounds(30, 150, 270, 70);

        disableOpsLabel1.setFont(new java.awt.Font("Bebas Neue Regular", 0, 36)); // NOI18N
        disableOpsLabel1.setForeground(new java.awt.Color(255, 255, 255));
        disableOpsLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        disableOpsLabel1.setText("Disable Operators");
        jPanel2.add(disableOpsLabel1);
        disableOpsLabel1.setBounds(30, 10, 270, 70);

        blitzToggle.setBackground(new java.awt.Color(102, 102, 102));
        blitzToggle.setFont(new java.awt.Font("Bebas Neue Regular", 0, 18)); // NOI18N
        blitzToggle.setForeground(new java.awt.Color(255, 255, 255));
        blitzToggle.setText("Blitz");
        blitzToggle.setFocusable(false);
        blitzToggle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                blitzToggleMouseEntered(evt);
            }
        });
        blitzToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blitzToggleActionPerformed(evt);
            }
        });
        jPanel2.add(blitzToggle);
        blitzToggle.setBounds(170, 70, 130, 35);

        montagneToggle.setBackground(new java.awt.Color(102, 102, 102));
        montagneToggle.setFont(new java.awt.Font("Bebas Neue Regular", 0, 18)); // NOI18N
        montagneToggle.setForeground(new java.awt.Color(255, 255, 255));
        montagneToggle.setText("Montagne");
        montagneToggle.setFocusable(false);
        montagneToggle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                montagneToggleMouseEntered(evt);
            }
        });
        montagneToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                montagneToggleActionPerformed(evt);
            }
        });
        jPanel2.add(montagneToggle);
        montagneToggle.setBounds(20, 70, 130, 35);

        shrinkMenu.setBackground(new java.awt.Color(102, 102, 102));
        shrinkMenu.setFont(new java.awt.Font("Bebas Neue Regular", 0, 24)); // NOI18N
        shrinkMenu.setForeground(new java.awt.Color(255, 255, 255));
        shrinkMenu.setText("<--");
        shrinkMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shrinkMenuActionPerformed(evt);
            }
        });
        jPanel2.add(shrinkMenu);
        shrinkMenu.setBounds(210, 510, 70, 41);

        backgroundRemovalOption.setBackground(new java.awt.Color(102, 102, 102));
        backgroundRemovalOption.setFont(new java.awt.Font("Bebas Neue Regular", 0, 24)); // NOI18N
        backgroundRemovalOption.setForeground(new java.awt.Color(255, 255, 255));
        backgroundRemovalOption.setText("Change background");
        backgroundRemovalOption.setFocusable(false);
        backgroundRemovalOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backgroundRemovalOptionActionPerformed(evt);
            }
        });
        jPanel2.add(backgroundRemovalOption);
        backgroundRemovalOption.setBounds(90, 260, 210, 41);

        recruitsToggle.setBackground(new java.awt.Color(102, 102, 102));
        recruitsToggle.setFont(new java.awt.Font("Bebas Neue Regular", 0, 18)); // NOI18N
        recruitsToggle.setForeground(new java.awt.Color(255, 255, 255));
        recruitsToggle.setText("Recruits");
        recruitsToggle.setFocusable(false);
        recruitsToggle.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                recruitsToggleMouseEntered(evt);
            }
        });
        recruitsToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recruitsToggleActionPerformed(evt);
            }
        });
        jPanel2.add(recruitsToggle);
        recruitsToggle.setBounds(170, 110, 130, 35);

        instantRollMode.setBackground(new java.awt.Color(102, 102, 102));
        instantRollMode.setFont(new java.awt.Font("Bebas Neue Regular", 0, 24)); // NOI18N
        instantRollMode.setForeground(new java.awt.Color(255, 255, 255));
        instantRollMode.setText("Instant Roll");
        instantRollMode.setFocusable(false);
        instantRollMode.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                instantRollModeMouseEntered(evt);
            }
        });
        instantRollMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instantRollModeActionPerformed(evt);
            }
        });
        jPanel2.add(instantRollMode);
        instantRollMode.setBounds(90, 310, 210, 40);

        uniqueOperatorMOde.setBackground(new java.awt.Color(102, 102, 102));
        uniqueOperatorMOde.setFont(new java.awt.Font("Bebas Neue Regular", 0, 22)); // NOI18N
        uniqueOperatorMOde.setForeground(new java.awt.Color(255, 255, 255));
        uniqueOperatorMOde.setText("Unique Operator Mode");
        uniqueOperatorMOde.setFocusable(false);
        uniqueOperatorMOde.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                uniqueOperatorMOdeMouseEntered(evt);
            }
        });
        uniqueOperatorMOde.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uniqueOperatorMOdeActionPerformed(evt);
            }
        });
        jPanel2.add(uniqueOperatorMOde);
        uniqueOperatorMOde.setBounds(90, 360, 210, 40);

        jLabel3.setFont(new java.awt.Font("Bebas Neue Regular", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("played)");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(90, 480, 220, 19);

        jLabel6.setFont(new java.awt.Font("Bebas Neue Regular", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Operators will be removed from ");
        jPanel2.add(jLabel6);
        jLabel6.setBounds(90, 400, 220, 19);

        jLabel7.setFont(new java.awt.Font("Bebas Neue Regular", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("the list after being chosen so you");
        jPanel2.add(jLabel7);
        jLabel7.setBounds(90, 420, 220, 16);

        jLabel8.setFont(new java.awt.Font("Bebas Neue Regular", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("wont get the same operator twice");
        jPanel2.add(jLabel8);
        jLabel8.setBounds(90, 440, 220, 19);

        jLabel9.setFont(new java.awt.Font("Bebas Neue Regular", 0, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("(Resets after all operators are");
        jPanel2.add(jLabel9);
        jLabel9.setBounds(90, 460, 220, 19);

        DisableSound.setBackground(new java.awt.Color(102, 102, 102));
        DisableSound.setFont(new java.awt.Font("Bebas Neue Regular", 0, 22)); // NOI18N
        DisableSound.setForeground(new java.awt.Color(255, 255, 255));
        DisableSound.setText("Disable sound effects");
        DisableSound.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        DisableSound.setFocusable(false);
        DisableSound.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                DisableSoundMouseEntered(evt);
            }
        });
        DisableSound.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisableSoundActionPerformed(evt);
            }
        });
        jPanel2.add(DisableSound);
        DisableSound.setBounds(90, 210, 210, 40);

        add(jPanel2);
        jPanel2.setBounds(530, 0, 400, 570);

        optionsButton.setBackground(new java.awt.Color(102, 102, 102));
        optionsButton.setFont(new java.awt.Font("Bebas Neue Regular", 0, 24)); // NOI18N
        optionsButton.setForeground(new java.awt.Color(255, 255, 255));
        optionsButton.setText("Settings");
        optionsButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        optionsButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        optionsButton.setFocusPainted(false);
        optionsButton.setFocusable(false);
        optionsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                optionsButtonMouseEntered(evt);
            }
        });
        optionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionsButtonActionPerformed(evt);
            }
        });
        add(optionsButton);
        optionsButton.setBounds(380, 30, 130, 27);

        appTitle.setFont(new java.awt.Font("Bebas Neue Regular", 0, 36)); // NOI18N
        appTitle.setForeground(new java.awt.Color(255, 255, 255));
        appTitle.setText("Operator    Roulette");
        add(appTitle);
        appTitle.setBounds(180, 130, 260, 60);

        titleShadow.setFont(new java.awt.Font("Bebas Neue Regular", 0, 36)); // NOI18N
        titleShadow.setForeground(new java.awt.Color(0, 0, 0));
        titleShadow.setText("Operator    Roulette");
        add(titleShadow);
        titleShadow.setBounds(176, 130, 255, 60);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/Rainbow6_Logo.png"))); // NOI18N
        add(jLabel1);
        jLabel1.setBounds(80, 70, 360, 90);

        attackerButton.setBackground(new java.awt.Color(102, 102, 102));
        attackerButton.setFont(new java.awt.Font("Bebas Neue Regular", 0, 32)); // NOI18N
        attackerButton.setForeground(new java.awt.Color(255, 255, 255));
        attackerButton.setText("Roll the dice!");
        attackerButton.setToolTipText("");
        attackerButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        attackerButton.setFocusPainted(false);
        attackerButton.setFocusable(false);
        attackerButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                attackerButtonMouseEntered(evt);
            }
        });
        attackerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attackerButtonActionPerformed(evt);
            }
        });
        add(attackerButton);
        attackerButton.setBounds(80, 240, 330, 40);

        operatorAmount.setFont(new java.awt.Font("Bebas Neue Regular", 0, 28)); // NOI18N
        operatorAmount.setForeground(new java.awt.Color(255, 255, 255));
        operatorAmount.setText("2");
        add(operatorAmount);
        operatorAmount.setBounds(170, 200, 40, 30);

        labelOperatorsLeft.setFont(new java.awt.Font("Bebas Neue Regular", 0, 28)); // NOI18N
        labelOperatorsLeft.setForeground(new java.awt.Color(255, 255, 255));
        labelOperatorsLeft.setText("Operators Left:");
        add(labelOperatorsLeft);
        labelOperatorsLeft.setBounds(20, 200, 210, 30);

        panelDice.setBackground(new java.awt.Color(51, 51, 51));
        panelDice.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelDice.setForeground(new java.awt.Color(102, 102, 102));
        panelDice.setLayout(null);

        attackerLabel.setFont(new java.awt.Font("Bebas Neue Regular", 0, 36)); // NOI18N
        attackerLabel.setForeground(new java.awt.Color(255, 255, 255));
        attackerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        attackerLabel.setText("No Operator");
        attackerLabel.setToolTipText("");
        panelDice.add(attackerLabel);
        attackerLabel.setBounds(270, 210, 150, 40);

        shieldLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/icons/sword.png"))); // NOI18N
        panelDice.add(shieldLogo);
        shieldLogo.setBounds(230, 120, 50, 70);

        shieldLogo1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/icons/shield.png"))); // NOI18N
        panelDice.add(shieldLogo1);
        shieldLogo1.setBounds(170, 120, 50, 70);

        defenderLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/noOperator.png"))); // NOI18N
        panelDice.add(defenderLogo);
        defenderLogo.setBounds(40, 80, 130, 140);

        defenderLabel.setFont(new java.awt.Font("Bebas Neue Regular", 0, 36)); // NOI18N
        defenderLabel.setForeground(new java.awt.Color(255, 255, 255));
        defenderLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        defenderLabel.setText("No Operator");
        defenderLabel.setToolTipText("");
        panelDice.add(defenderLabel);
        defenderLabel.setBounds(30, 210, 150, 40);

        attackerLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/noOperatorAttacker.png"))); // NOI18N
        panelDice.add(attackerLogo);
        attackerLogo.setBounds(280, 80, 128, 140);

        jLabel4.setFont(new java.awt.Font("Bebas Neue Regular", 0, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Attacker");
        panelDice.add(jLabel4);
        jLabel4.setBounds(280, 50, 130, 30);

        jLabel5.setFont(new java.awt.Font("Bebas Neue Regular", 0, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Defender");
        jLabel5.setToolTipText("");
        panelDice.add(jLabel5);
        jLabel5.setBounds(40, 50, 130, 30);

        rollProgress.setBackground(new java.awt.Color(102, 102, 102));
        rollProgress.setForeground(new java.awt.Color(255, 255, 255));
        rollProgress.setMaximum(35);
        rollProgress.setToolTipText("");
        rollProgress.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        rollProgress.setFocusable(false);
        panelDice.add(rollProgress);
        rollProgress.setBounds(180, 60, 90, 16);

        jSeparator1.setBackground(new java.awt.Color(102, 102, 102));
        jSeparator1.setToolTipText("");
        panelDice.add(jSeparator1);
        jSeparator1.setBounds(0, 260, 470, 10);

        challengeLabel.setFont(new java.awt.Font("Bebas Neue Regular", 0, 22)); // NOI18N
        challengeLabel.setForeground(new java.awt.Color(255, 255, 255));
        challengeLabel.setText("...");
        panelDice.add(challengeLabel);
        challengeLabel.setBounds(110, 260, 370, 30);

        challengeStaticLabel1.setFont(new java.awt.Font("Bebas Neue Regular", 0, 22)); // NOI18N
        challengeStaticLabel1.setForeground(new java.awt.Color(255, 255, 255));
        challengeStaticLabel1.setText("Challenge:");
        panelDice.add(challengeStaticLabel1);
        challengeStaticLabel1.setBounds(10, 260, 180, 30);

        add(panelDice);
        panelDice.setBounds(20, 230, 470, 290);

        Changelog.setBackground(new java.awt.Color(102, 102, 102));
        Changelog.setFont(new java.awt.Font("Bebas Neue Regular", 0, 24)); // NOI18N
        Changelog.setForeground(new java.awt.Color(255, 255, 255));
        Changelog.setText("Changelog");
        Changelog.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Changelog.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Changelog.setFocusPainted(false);
        Changelog.setFocusable(false);
        Changelog.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ChangelogMouseEntered(evt);
            }
        });
        Changelog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChangelogActionPerformed(evt);
            }
        });
        add(Changelog);
        Changelog.setBounds(240, 30, 130, 27);

        backgroundImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/wallpaper1.jpg"))); // NOI18N
        backgroundImage.setToolTipText("");
        add(backgroundImage);
        backgroundImage.setBounds(0, 0, 970, 563);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

        Timer timer = new Timer(33, new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            list.generateRandomOperator();
            drawerCount++;
            progressValue++;
            playSoundEffect("/sounds/Tjong.wav");
            rollProgress.setValue(progressValue);
            delay = delay + 6;
            timer.setDelay(delay);
                if (null != list.attacker) // ATTACKERS
            switch (list.attacker) {
                case "sledge":
                    attackerLabel.setText("Sledge!");
                    attackerLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/attackers/sledge.jpg")));
                    break;
                case "thatcher":
                    attackerLabel.setText("Thatcher!");
                    attackerLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/attackers/thatcher.jpg")));
                    break;
                case "ash":
                    attackerLabel.setText("Ash!");
                    attackerLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/attackers/ash.jpg")));
                    break;
                case "thermite":
                    attackerLabel.setText("Thermite!");
                    attackerLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/attackers/thermite.jpg")));
                    break;
                case "twitch":
                    attackerLabel.setText("Twitch!");
                    attackerLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/attackers/twitch.jpg")));
                    break;
                case "montagne":
                    attackerLabel.setText("Montagne!");
                    attackerLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/attackers/montagne.jpg")));
                    break;
                case "glaz":
                    attackerLabel.setText("Glaz!");
                    attackerLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/attackers/glaz.jpg")));
                    break;
                case "fuse":
                    attackerLabel.setText("Fuse!");
                    attackerLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/attackers/fuse.jpg")));
                    break;
                case "blitz":
                    attackerLabel.setText("Blitz!");
                    attackerLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/attackers/blitz.jpg")));
                    break;
                case "iq":
                    attackerLabel.setText("IQ!");
                    attackerLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/attackers/iq.jpg")));
                    break;
                case "blackbeard":
                    attackerLabel.setText("Blackbeard!");
                    attackerLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/attackers/blackbeard.jpg")));
                    break;
                case "buck":
                    attackerLabel.setText("Buck!");
                    attackerLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/attackers/buck.jpg")));
                    break;
                case "hibana":
                    attackerLabel.setText("Hibana!");
                    attackerLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/attackers/hibana.jpg")));
                    break;
                case "recruit":
                    attackerLabel.setText("recruit");
                    attackerLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/defenders/recruit.jpg")));
                    break;
                default:
                    break;
            }
                if (null != list.defender) // DEFENDERS
            switch (list.defender) {
                case "smoke":
                    defenderLabel.setText("Smoke!");
                    defenderLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/defenders/smoke.jpg")));
                    break;
                case "mute":
                    defenderLabel.setText("Mute!");
                    defenderLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/defenders/mute.jpg")));
                    break;
                case "castle":
                    defenderLabel.setText("Castle!");
                    defenderLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/defenders/castle.jpg")));
                    break;
                case "pulse":
                    defenderLabel.setText("Pulse!");
                    defenderLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/defenders/pulse.jpg")));
                    break;
                case "doc":
                    defenderLabel.setText("Doc!");
                    defenderLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/defenders/doc.jpg")));
                    break;
                case "rook":
                    defenderLabel.setText("Rook!");
                    defenderLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/defenders/rook.jpg")));
                    break;
                case "kapkan":
                    defenderLabel.setText("Kapkan!");
                    defenderLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/defenders/kapkan.jpg")));
                    break;
                case "tachanka":
                    defenderLabel.setText("Lord!");
                    defenderLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/defenders/tachanka.jpg")));
                    break;
                case "jager":
                    defenderLabel.setText("Jäger!");
                    defenderLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/defenders/jager.jpg")));
                    break;
                case "bandit":
                    defenderLabel.setText("Bandit!");
                    defenderLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/defenders/bandit.jpg")));
                    break;
                case "valkyrie":
                    defenderLabel.setText("Valkyrie!");
                    defenderLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/defenders/valkyrie.jpg")));
                    break;
                case "frost":
                    defenderLabel.setText("Frost!");
                    defenderLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/defenders/frost.jpg")));
                    break;
                case "echo":
                    defenderLabel.setText("Echo!");
                    defenderLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/defenders/echo.jpg")));
                    break;
                case "recruit":
                    defenderLabel.setText("recruit");
                    defenderLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/defenders/recruit.jpg")));
                    break;
                default:
                    break;
            }
                    if (drawerCount == 35) {
                        progressValue = 0;
                        attackerButton.setText("Roll the dice!");
                        timer.stop();
                        challengeLabel.setText(list.challenge);
                        attackerButton.setBackground(new java.awt.Color(51, 153, 255));
                        playSoundEffect(list.alertSound);
                        attackerLabel.setVisible(true);
                        defenderLabel.setVisible(true);
                        attackerButton.setEnabled(true);
                        playVoice();
                        totalRolls++;
                            if (totalRolls == 4) {    
                                    tip tipWindow = new tip(new javax.swing.JFrame(), true);
                                    tipWindow.setLocationRelativeTo(null);
                                    tipWindow.setVisible(true);
                                    tipWindow.setModal(true);
                            }
                    }
        }
    });
    
 //// THE BIG MIGHTLY DICE BUTTON! /////////////////////////////////////////////
    private void attackerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attackerButtonActionPerformed
                if (instantRoll == false) {
                    drawerCount = 34;
                } else {
                    drawerCount = 0;
                }
                
                if (uniqueOperatorMode == true) {
                    list.attackers.remove(list.attacker);
                    list.defenders.remove(list.defender);
                    operatorAmount.setText(String.valueOf(list.attackers.size()));
                }
                
                if (list.attackers.size() == 1) {
                    list.addValuesToArray();
                }
                
        playSoundEffect(list.buttonClick);
        attackerButton.setEnabled(false);
        attackerButton.setText("Rolling...");
        attackerButton.setBackground(new java.awt.Color(51, 51, 51));
        challengeLabel.setText("...");
        progressValue = 0;
        totalRolls++;
        delay = 15;
        timer.setDelay(delay);
        attackerLabel.setVisible(false);
        defenderLabel.setVisible(false);
        timer.start();
    }//GEN-LAST:event_attackerButtonActionPerformed
///////////////////////////////////////////////////////////////////////////////
    
    private void optionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionsButtonActionPerformed
        playSoundEffect(list.buttonClick);
        this.setSize(837, 561);
        optionsButton.setVisible(false);
    }//GEN-LAST:event_optionsButtonActionPerformed

    private void shrinkMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shrinkMenuActionPerformed
        this.setSize(507, 561);
        optionsButton.setVisible(true);
        playSoundEffect(list.buttonClick);
    }//GEN-LAST:event_shrinkMenuActionPerformed

    private void blitzToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blitzToggleActionPerformed
        blitzEnabled = !blitzEnabled;
        if (blitzEnabled == false) {
        list.attackers.remove("blitz");
        } else {
            list.attackers.add("blitz");
        }
        playSoundEffect(list.buttonClick);
    }//GEN-LAST:event_blitzToggleActionPerformed

    private void backgroundRemovalOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backgroundRemovalOptionActionPerformed
        playSoundEffect(list.buttonClick);
        backgroundNumber++;
        switch (backgroundNumber) {
            case 1:
                backgroundImage.setVisible(true);
                backgroundImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/wallpaper1.jpg")));
                break;
            case 2:
                backgroundImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/photos/wallpaper2.jpg")));
                break;
            case 3:
                backgroundImage.setVisible(false);
                backgroundNumber = 0;
                break;
        }
    }//GEN-LAST:event_backgroundRemovalOptionActionPerformed

    private void attackerButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_attackerButtonMouseEntered
        playSoundEffect(list.hover);
    }//GEN-LAST:event_attackerButtonMouseEntered

    private void optionsButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_optionsButtonMouseEntered
        playSoundEffect(list.hover);
    }//GEN-LAST:event_optionsButtonMouseEntered

    private void ChangelogMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ChangelogMouseEntered
        playSoundEffect(list.hover);
    }//GEN-LAST:event_ChangelogMouseEntered

    private void ChangelogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChangelogActionPerformed
        playSoundEffect(list.buttonClick);
        changelogs changelogsWindow = new changelogs(new javax.swing.JFrame(), true);
        changelogsWindow.setLocationRelativeTo(null);
        changelogsWindow.setVisible(true);
        
    }//GEN-LAST:event_ChangelogActionPerformed

    private void montagneToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_montagneToggleActionPerformed
        montagneEnabled = !montagneEnabled;
        if (montagneEnabled == false) {
        list.attackers.remove("montagne");
        } else {
            list.attackers.add("montagne");
        }
        playSoundEffect(list.buttonClick);
    }//GEN-LAST:event_montagneToggleActionPerformed

    private void recruitsToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recruitsToggleActionPerformed
        recruitsEnabled = !recruitsEnabled;
        if (recruitsEnabled == false) {
            list.attackers.remove("recruit");
            list.defenders.remove("recruit");
        } else {
            list.attackers.add("recruit");
            list.defenders.add("recruit");
        }
        playSoundEffect(list.buttonClick);
    }//GEN-LAST:event_recruitsToggleActionPerformed

    private void instantRollModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_instantRollModeActionPerformed
        instantRoll = !instantRoll;
        playSoundEffect(list.buttonClick);
        System.out.println(instantRoll);
    }//GEN-LAST:event_instantRollModeActionPerformed

    private void instantRollModeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_instantRollModeMouseEntered
                playSoundEffect(list.hover);
    }//GEN-LAST:event_instantRollModeMouseEntered

    private void recruitsToggleMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_recruitsToggleMouseEntered
        playSoundEffect(list.hover);        // TODO add your handling code here:
    }//GEN-LAST:event_recruitsToggleMouseEntered

    private void blitzToggleMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_blitzToggleMouseEntered
        playSoundEffect(list.hover);        // TODO add your handling code here:
    }//GEN-LAST:event_blitzToggleMouseEntered

    private void montagneToggleMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_montagneToggleMouseEntered
        playSoundEffect(list.hover);        // TODO add your handling code here:
    }//GEN-LAST:event_montagneToggleMouseEntered

    private void uniqueOperatorMOdeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_uniqueOperatorMOdeMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_uniqueOperatorMOdeMouseEntered

    private void uniqueOperatorMOdeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uniqueOperatorMOdeActionPerformed
        playSoundEffect(list.buttonClick);
        uniqueOperatorMode = ! uniqueOperatorMode;
            if (uniqueOperatorMode == true) {
                operatorAmount.setVisible(true);
                labelOperatorsLeft.setVisible(true);
                operatorAmount.setText(String.valueOf(list.attackers.size()));
            } else {
                operatorAmount.setVisible(false);
                labelOperatorsLeft.setVisible(false);
            }
    }//GEN-LAST:event_uniqueOperatorMOdeActionPerformed

    private void DisableSoundMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DisableSoundMouseEntered
        playSoundEffect(list.hover);
    }//GEN-LAST:event_DisableSoundMouseEntered

    private void DisableSoundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisableSoundActionPerformed
        playSoundEffect(list.buttonClick);                
        noSoundEffects = !noSoundEffects;
    }//GEN-LAST:event_DisableSoundActionPerformed
    
// PLAY AUDIO
    
            final Timer voiceDelay = new Timer(500, new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            delayVoicePlay++;
                if (delayVoicePlay == 2) {
                    playSoundEffect(list.randomVoicePlayer);
                    voiceDelay.stop();
                    delayVoicePlay = 0;
            }
        }
        });
            
        public void playVoice() {
            voiceDelay.start();
            voiceDelay.setDelay(300);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UI().setVisible(true);
            }
        });
    }
   
    public void playSoundEffect(String soundName) {
       if (noSoundEffects == false) {
            try 
            {
                AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(UI.class.getResource(soundName));
                Clip clip = AudioSystem.getClip();
                clip.open(audioInputStream);
                clip.start();
            }
            catch(Exception ex)
            {
              System.out.println("Error with playing sound.");
                 ex.printStackTrace( );
       }
     } }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Changelog;
    private javax.swing.JToggleButton DisableSound;
    private javax.swing.JLabel appSettings;
    private javax.swing.JLabel appTitle;
    private javax.swing.JButton attackerButton;
    private javax.swing.JLabel attackerLabel;
    private javax.swing.JLabel attackerLogo;
    private javax.swing.JLabel backgroundImage;
    private javax.swing.JButton backgroundRemovalOption;
    private javax.swing.JToggleButton blitzToggle;
    private javax.swing.JLabel challengeLabel;
    private javax.swing.JLabel challengeStaticLabel1;
    private javax.swing.JLabel defenderLabel;
    private javax.swing.JLabel defenderLogo;
    private javax.swing.JLabel disableOpsLabel1;
    private javax.swing.JToggleButton instantRollMode;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel labelOperatorsLeft;
    private javax.swing.JToggleButton montagneToggle;
    private javax.swing.JLabel operatorAmount;
    private javax.swing.JButton optionsButton;
    private javax.swing.JPanel panelDice;
    private javax.swing.JToggleButton recruitsToggle;
    private javax.swing.JProgressBar rollProgress;
    private javax.swing.JLabel shieldLogo;
    private javax.swing.JLabel shieldLogo1;
    private javax.swing.JButton shrinkMenu;
    private javax.swing.JLabel titleShadow;
    private javax.swing.JToggleButton uniqueOperatorMOde;
    // End of variables declaration//GEN-END:variables
    private operatorList list;
    private int drawerCount;
    private int delay;
    private int progressValue;
    private boolean noSoundEffects;
    private boolean noBackground;
    private boolean blitzEnabled;
    private boolean montagneEnabled;
    private boolean recruitsEnabled;
    private boolean instantRoll;
    private boolean uniqueOperatorMode;
    private int delayVoicePlay;
    private int totalRolls;
    private int backgroundNumber;
    private int rollSpeed;

    Object getRootPane() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
